% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flash_backfit.R
\name{flash.backfit}
\alias{flash.backfit}
\title{Backfit a flash object}
\usage{
flash.backfit(
  flash,
  kset = NULL,
  extrapolate = TRUE,
  warmstart = TRUE,
  conv.crit.fn = conv.crit.elbo,
  tol = set.default.tol(flash),
  maxiter = 500,
  verbose = NULL
)
}
\arguments{
\item{flash}{A \code{flash} or \code{flash.fit} object.}

\item{kset}{A vector of integers specifying which factors to backfit.
If \code{kset = NULL}, then all existing factors will be backfitted.}

\item{extrapolate}{Whether to use an extrapolation technique
inspired by Ang and Gillis (2019) to accelerate the fitting process.
Control parameters are handled via global options and can be set by
calling \code{options("extrapolate.control") <- control.param}.}

\item{warmstart}{Whether to use "warmstarts" when solving the EBNM
subproblems by initializing solutions at the previous value of the fitted
prior \eqn{\hat{g}}. An important side effect of warmstarts for
\code{ashr}-like prior families is to fix the grid at its initial setting.
Fixing the grid can lead to poor fits if there
are large changes in the scale of the estimated prior over the
course of the fitting process. However, allowing the grid to
vary can occasionally result in decreases in ELBO.}

\item{conv.crit.fn}{The function used to calculate the optimization objective.
Fitting terminates (i.e., the fit is considered to have "converged") when
this objective drops below the value specified by parameter \code{tol}.
Options include \code{\link{conv.crit.elbo}} (the default),
\code{\link{conv.crit.loadings}}, and \code{\link{conv.crit.factors}}.
Custom functions may also be used. They should accept three parameters,
\code{new}, \code{old}, and \code{k}, where \code{new} refers to the
\code{\link{flash.fit}} object from the current iteration, \code{old}
refers to the \code{\link{flash.fit}} object from the previous iteration,
and \code{k} identifies the factor/loadings pair that is currently
being updated during sequential backfits (that is, in calls to function
\code{\link{flash.backfit}} where \code{extrapolate = FALSE}).}

\item{tol}{The convergence tolerance (see parameter \code{conv.crit.fn}
above).}

\item{maxiter}{The maximum number of backfitting iterations. An "iteration"
is defined such that all factors in \code{kset} get updated at each
iteration.}

\item{verbose}{When and how to display progress updates. Set to
\code{0} for none, \code{1} for updates after a factor is added or a
backfit is completed, \code{2} for additional notifications about the
variational lower bound, and \code{3} for updates after every iteration.
It is also possible to output a single tab-delimited table of values
using function \code{\link{flash.set.verbose}} with \code{verbose = -1}.}
}
\value{
A \code{\link{flash}} object.
}
\description{
Backfits existing flash factor/loadings pairs. Whereas a "greedy" fit optimizes
  each newly added factor/loadings pair in one go without returning to optimize
  previously added pairs, a "backfit" updates all existing pairs in a cyclical
  fashion.
}
